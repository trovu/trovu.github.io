{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"trovu.net \u2013 Web shortcuts, social, private. Trovu is the successor of Serchilo / FindFind.it . Read about the differences . trovu allows you to define shortcuts for URLs / websites and then quickly access them in a command-line way, e.g. g berlin \u2013 search Google for \"berlin\". w berlin \u2013 Wikipedia article for \"berlin\" in your language. gd london, liverpool \u2013 find a route on Google Maps from London to Liverpool. Key features Privacy : Queries are processed in the client, not server. Social : Curated shortcuts are kept in YAML files in a public Github repository . Send a pull request to add or edit them. Freedom : Optionally, create personal shortcuts in your own repository . Read more Namespaces How a query is processed Includes Shortcut URLs Advanced settings & personal shortcuts Trovu compared to Serchilo / FindFind.it Migrate from FindFind.it Troubleshooting / FAQ Support Repositories trovu-data This repository contains all the data, e.g. shortcuts types/city mappings for argument type city Fork this repository to add or edit shortcuts (and send then a pull request). trovu This (future mono-)repository contains now the web frontend and this documentation. Live web version https://trovu.net/","title":"Home"},{"location":"#trovunet-web-shortcuts-social-private","text":"Trovu is the successor of Serchilo / FindFind.it . Read about the differences . trovu allows you to define shortcuts for URLs / websites and then quickly access them in a command-line way, e.g. g berlin \u2013 search Google for \"berlin\". w berlin \u2013 Wikipedia article for \"berlin\" in your language. gd london, liverpool \u2013 find a route on Google Maps from London to Liverpool.","title":"trovu.net \u2013 Web shortcuts, social, private."},{"location":"#key-features","text":"Privacy : Queries are processed in the client, not server. Social : Curated shortcuts are kept in YAML files in a public Github repository . Send a pull request to add or edit them. Freedom : Optionally, create personal shortcuts in your own repository .","title":"Key features"},{"location":"#read-more","text":"Namespaces How a query is processed Includes Shortcut URLs Advanced settings & personal shortcuts Trovu compared to Serchilo / FindFind.it Migrate from FindFind.it Troubleshooting / FAQ Support","title":"Read more"},{"location":"#repositories","text":"","title":"Repositories"},{"location":"#trovu-data","text":"This repository contains all the data, e.g. shortcuts types/city mappings for argument type city Fork this repository to add or edit shortcuts (and send then a pull request).","title":"trovu-data"},{"location":"#trovu","text":"This (future mono-)repository contains now the web frontend and this documentation.","title":"trovu"},{"location":"#live-web-version","text":"https://trovu.net/","title":"Live web version"},{"location":"Presentations/","text":"Presentations FOSSASIA 2019: pdf","title":"Presentations"},{"location":"Presentations/#presentations","text":"FOSSASIA 2019: pdf","title":"Presentations"},{"location":"privacy/","text":"Privacy policy Trovu does not log your personal information. In particular: We do not record IP addresses. We do not record search queries. We do not serve cookies.","title":"Privacy policy"},{"location":"privacy/#privacy-policy","text":"Trovu does not log your personal information. In particular: We do not record IP addresses. We do not record search queries. We do not serve cookies.","title":"Privacy policy"},{"location":"editors/policy/","text":"Content policy This page is about which shortcuts may be in the curated repository trovu-data , and how they should look like. Note that you can add any shortcut to your user repository , completely ignoring this policy. Caveat: You might note that many curated shortcuts at this moment don't match the listed criteria. This is because Trovu's first version (named Serchilo ) has existed since 2005, with user-created shortcuts available since 2007, and this policy started to be written in 2023. Thus, the goal is to finally define some standards and then slowly applying them, with as little as possible breaking of existing user habits. Shortcuts Avoid pure bookmark shortcuts Bookmark shortcuts refer to shortcuts with 0 arguments, e.g.: g 0: url: https://www.google.com/search?hl={$language} title: Google Web Homepage You use it by simply entering g and hitting Enter. This shortcut to the Google Web Homepage is fine because it is not alone: There is also a shortcut for the Google Websearch g 1 . But a bookmark shortcut that has no corresponding 1-or-more-argument shortcut should be avoided. You may put them into your user shortcuts . Keywords Avoid common words Many users use Trovu with a default keyword : They can enter any query, and if it's not matched with a shortcut, the default keyword will be used \u2013 often it refers to Google. Thus, such users often perform their Google searches without g \u2013 because it will be applied automatically if not shortcut is found. However, if there is a shortcut with a keyword apple or app , this breaks. This is why we want to avoid such common words as keywords: Instead of app , we use gpa ( Google Play App search ), and instead of apple , we use apl (omitting the vowels, shorter) Abbreviate properly The rule of thumb: The more popular the website, the shorter may be its keyword. If we abbreviate, here are the rules. 1-letter keywords: Only for top 50 The English alphabet has 26 latin letters. Keyword of only 1 letter should therefore be only applied if the website belongs to the top 50 in visitor's count of the world (namespace o ), to minimize the likelihood of clashes. If the shortcut shall belong to a language or country namespace, then its website should be top 50 of that country. 2-letter keywords: Language codes have priority A keyword with 2 letters shall be used for a dictionary of that language, using its ISO-639-1 language code (e.g. en , fr , be ). Such shortcuts should be put into a language namespace. If the shortcut is not about a dictionary, then it should not use a ISO-639-1 language code. This is to keep the space for a potential future dictionary shortcut. Abbreviate by first sounds of words and/or syllables A good keyword shall be easily memorable, and also not a word itself. We try to achieve this by taking the first letters of the website's name (if it contains multiple words) or syllables. For example: fb for FaceBook db for Deutsche Bahn ad for AnDroid bmf for Besser MitFahren bmn for BugMeNot","title":"Content policy"},{"location":"editors/policy/#content-policy","text":"This page is about which shortcuts may be in the curated repository trovu-data , and how they should look like. Note that you can add any shortcut to your user repository , completely ignoring this policy. Caveat: You might note that many curated shortcuts at this moment don't match the listed criteria. This is because Trovu's first version (named Serchilo ) has existed since 2005, with user-created shortcuts available since 2007, and this policy started to be written in 2023. Thus, the goal is to finally define some standards and then slowly applying them, with as little as possible breaking of existing user habits.","title":"Content policy"},{"location":"editors/policy/#shortcuts","text":"","title":"Shortcuts"},{"location":"editors/policy/#avoid-pure-bookmark-shortcuts","text":"Bookmark shortcuts refer to shortcuts with 0 arguments, e.g.: g 0: url: https://www.google.com/search?hl={$language} title: Google Web Homepage You use it by simply entering g and hitting Enter. This shortcut to the Google Web Homepage is fine because it is not alone: There is also a shortcut for the Google Websearch g 1 . But a bookmark shortcut that has no corresponding 1-or-more-argument shortcut should be avoided. You may put them into your user shortcuts .","title":"Avoid pure bookmark shortcuts"},{"location":"editors/policy/#keywords","text":"","title":"Keywords"},{"location":"editors/policy/#avoid-common-words","text":"Many users use Trovu with a default keyword : They can enter any query, and if it's not matched with a shortcut, the default keyword will be used \u2013 often it refers to Google. Thus, such users often perform their Google searches without g \u2013 because it will be applied automatically if not shortcut is found. However, if there is a shortcut with a keyword apple or app , this breaks. This is why we want to avoid such common words as keywords: Instead of app , we use gpa ( Google Play App search ), and instead of apple , we use apl (omitting the vowels, shorter)","title":"Avoid common words"},{"location":"editors/policy/#abbreviate-properly","text":"The rule of thumb: The more popular the website, the shorter may be its keyword. If we abbreviate, here are the rules.","title":"Abbreviate properly"},{"location":"editors/policy/#1-letter-keywords-only-for-top-50","text":"The English alphabet has 26 latin letters. Keyword of only 1 letter should therefore be only applied if the website belongs to the top 50 in visitor's count of the world (namespace o ), to minimize the likelihood of clashes. If the shortcut shall belong to a language or country namespace, then its website should be top 50 of that country.","title":"1-letter keywords: Only for top 50"},{"location":"editors/policy/#2-letter-keywords-language-codes-have-priority","text":"A keyword with 2 letters shall be used for a dictionary of that language, using its ISO-639-1 language code (e.g. en , fr , be ). Such shortcuts should be put into a language namespace. If the shortcut is not about a dictionary, then it should not use a ISO-639-1 language code. This is to keep the space for a potential future dictionary shortcut.","title":"2-letter keywords: Language codes have priority"},{"location":"editors/policy/#abbreviate-by-first-sounds-of-words-andor-syllables","text":"A good keyword shall be easily memorable, and also not a word itself. We try to achieve this by taking the first letters of the website's name (if it contains multiple words) or syllables. For example: fb for FaceBook db for Deutsche Bahn ad for AnDroid bmf for Besser MitFahren bmn for BugMeNot","title":"Abbreviate by first sounds of words and/or syllables"},{"location":"legacy/differences/","text":"Differences to Serchilo and FindFind.it Trovu is the official successor of Serchilo / FindFind.it . FindFind.it will be closed latest in October 2023 , with the end of life of Drupal 7 . If you know FindFind.it, then you almost know how Trovu works. However, a few things are different: Main difference: search queries are not sent out to the server, all processing is done in the client. This means much more privacy. Country namespaces are not 3-letter but 2-letter-codes, prefixed with a dot, e.g. .de , not deu .pl , not pol Instead in a server database, shortcuts are kept in YAML files , in a separate GitHub repository . There, we can stand on Git's shoulders to keep track of shortcut additions and changes. Pull and merge requests are welcome. Once you open Trovu, all shortcuts are loaded into your client and remain cached there, (until you reload ). So even if the Trovu server is down, you can keep using Trovu. If you have personal user shortcuts , for Trovu you host them on your Github account . Potentially, this allows us to have private/secret user shortcuts in the future: Instead on Github, you could host on your own server, behind password protection, e.g. https://user:password@example.com/my_trovu/shortcuts.yml . Not sure if there's a need, if so, please open a ticket . Read more about how migrate from FindFind.it to Trovu .","title":"Differences to Serchilo and FindFind.it"},{"location":"legacy/differences/#differences-to-serchilo-and-findfindit","text":"Trovu is the official successor of Serchilo / FindFind.it . FindFind.it will be closed latest in October 2023 , with the end of life of Drupal 7 . If you know FindFind.it, then you almost know how Trovu works. However, a few things are different: Main difference: search queries are not sent out to the server, all processing is done in the client. This means much more privacy. Country namespaces are not 3-letter but 2-letter-codes, prefixed with a dot, e.g. .de , not deu .pl , not pol Instead in a server database, shortcuts are kept in YAML files , in a separate GitHub repository . There, we can stand on Git's shoulders to keep track of shortcut additions and changes. Pull and merge requests are welcome. Once you open Trovu, all shortcuts are loaded into your client and remain cached there, (until you reload ). So even if the Trovu server is down, you can keep using Trovu. If you have personal user shortcuts , for Trovu you host them on your Github account . Potentially, this allows us to have private/secret user shortcuts in the future: Instead on Github, you could host on your own server, behind password protection, e.g. https://user:password@example.com/my_trovu/shortcuts.yml . Not sure if there's a need, if so, please open a ticket . Read more about how migrate from FindFind.it to Trovu .","title":"Differences to Serchilo and FindFind.it"},{"location":"legacy/migrate/","text":"Migrate from FindFind.it FindFind.it will end its service in October December 2023 , with the end of life of Drupal 7 . But its successor trovu.net is already running. Trovu is a little different to FindFind.it / Serchilo . This page helps you how to switch to Trovu. Your migration depends on whether you used FindFind.it with or without a personal account. Without a FindFind.it account Read how to use Trovu on your device . Make sure you set the correct language and country, either via the URL or Settings. With a FindFind.it account In this case, you can migrate your settings and user shortcuts. It should not take longer than 5 minutes . You must have an account at Github . It is free. Log into Github. Open trovu-data-user . Fork trovu-data-user into your account. (You find the button on the upper right.) Within your newly forked repository (it should be under https://github.com/YOUR_GITHUB_USERNAME/trovu-data-user ) , in the file list click on config.yml and then the \ud83d\udd8a icon on the upper right to edit it. In a new tab, log into your FindFind.it account. Go to My account \u27a1\ufe0f Edit . At the bottom, find the section Export to Trovu Replace the contents in the opened config.yml on Github with the contents of the config.yml field in FindFind.it. Click on Commit changes . Do the same for shortcuts.yml . Call Trovu with https://trovu.net/#github=YOUR_GITHUB_USERNAME Read how to use Trovu on your device . Read more Advanced settings & personal shortcuts If you have problems or questions, get support .","title":"Migrate from FindFind.it"},{"location":"legacy/migrate/#migrate-from-findfindit","text":"FindFind.it will end its service in October December 2023 , with the end of life of Drupal 7 . But its successor trovu.net is already running. Trovu is a little different to FindFind.it / Serchilo . This page helps you how to switch to Trovu. Your migration depends on whether you used FindFind.it with or without a personal account.","title":"Migrate from FindFind.it"},{"location":"legacy/migrate/#without-a-findfindit-account","text":"Read how to use Trovu on your device . Make sure you set the correct language and country, either via the URL or Settings.","title":"Without a FindFind.it account"},{"location":"legacy/migrate/#with-a-findfindit-account","text":"In this case, you can migrate your settings and user shortcuts. It should not take longer than 5 minutes . You must have an account at Github . It is free. Log into Github. Open trovu-data-user . Fork trovu-data-user into your account. (You find the button on the upper right.) Within your newly forked repository (it should be under https://github.com/YOUR_GITHUB_USERNAME/trovu-data-user ) , in the file list click on config.yml and then the \ud83d\udd8a icon on the upper right to edit it. In a new tab, log into your FindFind.it account. Go to My account \u27a1\ufe0f Edit . At the bottom, find the section Export to Trovu Replace the contents in the opened config.yml on Github with the contents of the config.yml field in FindFind.it. Click on Commit changes . Do the same for shortcuts.yml . Call Trovu with https://trovu.net/#github=YOUR_GITHUB_USERNAME Read how to use Trovu on your device .","title":"With a FindFind.it account"},{"location":"legacy/migrate/#read-more","text":"Advanced settings & personal shortcuts If you have problems or questions, get support .","title":"Read more"},{"location":"shortcuts/includes/","text":"Includes Includes allow to use the same shortcut properties in different shortcuts. They are heavily used for dictionary shortcuts. Simple includes Includes are defined with include: . For example, dcm contains: de-en 1: url: https://www.dict.com/german-english/{%word} title: German-English (dict.com) tags: - dictionary - english - german - language examples: baum: English translation of \"baum\" tree: German translation of \"tree\" Additionally, there is: en-de 1: title: Englisch-Deutsch (dict.com) include: key: de-en 1 examples: tree: Deutsch-\u00dcbersetzung von \"tree\" baum: Englisch-\u00dcbersetzung von \"baum\" Both are separate shortcuts and can be called individually. But en-de 1 includes from de-en 1 all properties that it does not define itself. In this case, these are url: and tags: . This way, the shortcut URL needs to be maintained only once. Includes with variables include.key may also use variables: en 1: include: key: en-{$language} 1 If the language from settings is e.g. de , it includes from en-de 1 . (And if en-de 1 contains include: , it also includes from there, and so on.) Includes from another namespace include may also include from another namespace: en 1: include: key: en 1 namespace: leo This can for example be set in one's user settings, to ensure using leo.org as the dictionary for English, no matter what is used in the site namespaces . Multiple include propositions include: may instead of only one key: (and namespace: ) also contain several ones. For instance, in o we have: ar 1: include: - key: ar 1 namespace: ard - key: ar 1 namespace: dcm - key: ar 1 namespace: bab - key: ar 1 namespace: lgs - key: ar 1 namespace: rvs - key: ar 1 namespace: pka This shortcut for an Arabic dictionary tries first to include from ard , the namespace for arabdict.com. And there also exists: ar 1: include: key: ar-{$language} 1 However, this namespace only contains Arabic dictionaries for a few languages ( de , en , fr , it , tr ). If the user's language is e.g. pl , the include process will fail at this point, as there is no ar-pl 1 in this namespace. In this case, the process goes back to o and tries the second entry: - key: ar 1 namespace: dcm As dcm does contain ar-pl 1 , this inclusion succeeds, and the Arabic dictionary is taken from dict.com.","title":"Includes"},{"location":"shortcuts/includes/#includes","text":"Includes allow to use the same shortcut properties in different shortcuts. They are heavily used for dictionary shortcuts.","title":"Includes"},{"location":"shortcuts/includes/#simple-includes","text":"Includes are defined with include: . For example, dcm contains: de-en 1: url: https://www.dict.com/german-english/{%word} title: German-English (dict.com) tags: - dictionary - english - german - language examples: baum: English translation of \"baum\" tree: German translation of \"tree\" Additionally, there is: en-de 1: title: Englisch-Deutsch (dict.com) include: key: de-en 1 examples: tree: Deutsch-\u00dcbersetzung von \"tree\" baum: Englisch-\u00dcbersetzung von \"baum\" Both are separate shortcuts and can be called individually. But en-de 1 includes from de-en 1 all properties that it does not define itself. In this case, these are url: and tags: . This way, the shortcut URL needs to be maintained only once.","title":"Simple includes"},{"location":"shortcuts/includes/#includes-with-variables","text":"include.key may also use variables: en 1: include: key: en-{$language} 1 If the language from settings is e.g. de , it includes from en-de 1 . (And if en-de 1 contains include: , it also includes from there, and so on.)","title":"Includes with variables"},{"location":"shortcuts/includes/#includes-from-another-namespace","text":"include may also include from another namespace: en 1: include: key: en 1 namespace: leo This can for example be set in one's user settings, to ensure using leo.org as the dictionary for English, no matter what is used in the site namespaces .","title":"Includes from another namespace"},{"location":"shortcuts/includes/#multiple-include-propositions","text":"include: may instead of only one key: (and namespace: ) also contain several ones. For instance, in o we have: ar 1: include: - key: ar 1 namespace: ard - key: ar 1 namespace: dcm - key: ar 1 namespace: bab - key: ar 1 namespace: lgs - key: ar 1 namespace: rvs - key: ar 1 namespace: pka This shortcut for an Arabic dictionary tries first to include from ard , the namespace for arabdict.com. And there also exists: ar 1: include: key: ar-{$language} 1 However, this namespace only contains Arabic dictionaries for a few languages ( de , en , fr , it , tr ). If the user's language is e.g. pl , the include process will fail at this point, as there is no ar-pl 1 in this namespace. In this case, the process goes back to o and tries the second entry: - key: ar 1 namespace: dcm As dcm does contain ar-pl 1 , this inclusion succeeds, and the Arabic dictionary is taken from dict.com.","title":"Multiple include propositions"},{"location":"shortcuts/namespaces/","text":"Namespaces Every shortcut belongs to exactly one namespace. Namespaces allow the same keyword to be used for different shortcuts \u2013 according to the user's language, location or personal setup. This comes in handy e.g. for multi-country websites like Amazon: a shakespeare shall search Amazon for books from Shakespeare \u2013 but Amazon from which country? Thanks to namespaces, we can have the keyword a both in the US country namespace .us , as also in the Germany namespace .de Depending on the country in your settings and thus the namespaces you use, the correct shortcut for Amazon will be picked. But even more: You can also override shortcuts: For instance, while all other users use the keyword g for Google, you might use it for something else \u2013 with your user namespace. Namespaces work well together with Includes , especially for dictionaries. Namespace types Namespace type Example namespaces Naming convention Contains Example shortcuts language de , en 2 chars, by ISO 639-1 shortcuts related to a particular language Merriam-Webster dictionary: mw tree (from en ) country .de , .us dot and 2 chars, by ISO 3166-1 alpha2 shortcuts related to a particular country Deutsche Bahn Fahrplanauskunft: db berlin, hamburg (from .de ) dictionary dcm (dict.com), lge (Linguee) 3 chars, by their abbreviated name shortcuts from a dictionary website German-English: de-en tree , en-de tree , en-{$language} tree (using language variable from settings) user georgjaehnig a Github user name (can be overridden with a custom name) custom shortcuts created by a user in their repo Trains from my home station: db> hamburg planet o the shape of the planet shortcuts unrelated to a language or country Google web search: g berlin language , country , dictionary and o (planet) are site namespaces . They are curated and here to find . (Pull requests are welcome.) Dictionary namespaces Currently, the following dictionary namespaces are defined: Namespace Dictionary alm Online Latein W\u00f6rterbuch ard arabdict bab bab.la beo BEOLINGUS crd croDict dcc dict.cc dcm Dictionary.com deo Dans-Esperanto ordbog dtn Deutsch-Tuerkisch.net esd SpanishDictionary.com flx Folkets lexikon hzn Heinzelnisse irs Irishionary.com leo leo.org lge Linguee lgs Langenscheidt mdb MDBG Chinese Dictionary pka pauker.at pns PONS dictionary rvs Reverso umt uitmuntend wdk Wadoku zrg Zargan Uniqueness in a namespace In a namespace, there can be only one shortcut with the same keyword and the same number of arguments: So in o , there is only one shortcut g with one argument, the Google web search . Using namespaces Basic The namespaces you use are derived from your settings (settings wheel left of the input field). For instance, having set language: English country: Unites States your namespaces will be: o ( planet namespace) en (English language) .us (USA) Advanced (with your Github account) Your namespaces are derived from your config.yml . With your personal configuration, you can use more than 3 namespaces. This can be useful when you like to use shortcuts from multiple languages and countries, e.g. dictionaries or public transport while travelling. Priority of namespaces The lower a namespace is in the namespaces list, the higher it's precedence. This is similar to Object-oriented programming , when a method needs to be picked from inheriting classes. So in the example before, shortcuts from .us override those from en , and both those from o . Adding a namespace (and overriding language or country setting) You can add a certain namespace to the subscribed namespaces by prefixing the query with [namespace]. If [namespace] happens to be a language or country namespace, it will also override the current language or country. Example Settings Let's assume we use Trovu with these settings : language: en country: us namespaces: - o - en - .us Query Now we call this query: de.w berlin Here, we add the namespace de . This means that for this very query the de namespace is added to the namespaces list, with the highest priority. Also, since de is a language, the language setting is changed to de . So this query is now processed as if the settings were: language: de country: us namespaces: - o - en - .us - de Result Instead of the English Wikipedia (that would have been used with language: en ), the German Wikipedia is used, because language is now set to de , and the Wikipedia shortcut's URL is defined as url: https://{$language}.wikipedia.org/... . Had another shortcut w 1 existed in namespace de , then this shortcut would have been called, because we had added this namespaces to the subscribed namespaces, with the highest priority. Default language and country Calling the homepage URL without any namespaces will set the default language and country based on navigator.language .","title":"Namespaces"},{"location":"shortcuts/namespaces/#namespaces","text":"Every shortcut belongs to exactly one namespace. Namespaces allow the same keyword to be used for different shortcuts \u2013 according to the user's language, location or personal setup. This comes in handy e.g. for multi-country websites like Amazon: a shakespeare shall search Amazon for books from Shakespeare \u2013 but Amazon from which country? Thanks to namespaces, we can have the keyword a both in the US country namespace .us , as also in the Germany namespace .de Depending on the country in your settings and thus the namespaces you use, the correct shortcut for Amazon will be picked. But even more: You can also override shortcuts: For instance, while all other users use the keyword g for Google, you might use it for something else \u2013 with your user namespace. Namespaces work well together with Includes , especially for dictionaries.","title":"Namespaces"},{"location":"shortcuts/namespaces/#namespace-types","text":"Namespace type Example namespaces Naming convention Contains Example shortcuts language de , en 2 chars, by ISO 639-1 shortcuts related to a particular language Merriam-Webster dictionary: mw tree (from en ) country .de , .us dot and 2 chars, by ISO 3166-1 alpha2 shortcuts related to a particular country Deutsche Bahn Fahrplanauskunft: db berlin, hamburg (from .de ) dictionary dcm (dict.com), lge (Linguee) 3 chars, by their abbreviated name shortcuts from a dictionary website German-English: de-en tree , en-de tree , en-{$language} tree (using language variable from settings) user georgjaehnig a Github user name (can be overridden with a custom name) custom shortcuts created by a user in their repo Trains from my home station: db> hamburg planet o the shape of the planet shortcuts unrelated to a language or country Google web search: g berlin language , country , dictionary and o (planet) are site namespaces . They are curated and here to find . (Pull requests are welcome.)","title":"Namespace types"},{"location":"shortcuts/namespaces/#dictionary-namespaces","text":"Currently, the following dictionary namespaces are defined: Namespace Dictionary alm Online Latein W\u00f6rterbuch ard arabdict bab bab.la beo BEOLINGUS crd croDict dcc dict.cc dcm Dictionary.com deo Dans-Esperanto ordbog dtn Deutsch-Tuerkisch.net esd SpanishDictionary.com flx Folkets lexikon hzn Heinzelnisse irs Irishionary.com leo leo.org lge Linguee lgs Langenscheidt mdb MDBG Chinese Dictionary pka pauker.at pns PONS dictionary rvs Reverso umt uitmuntend wdk Wadoku zrg Zargan","title":"Dictionary namespaces"},{"location":"shortcuts/namespaces/#uniqueness-in-a-namespace","text":"In a namespace, there can be only one shortcut with the same keyword and the same number of arguments: So in o , there is only one shortcut g with one argument, the Google web search .","title":"Uniqueness in a namespace"},{"location":"shortcuts/namespaces/#using-namespaces","text":"","title":"Using namespaces"},{"location":"shortcuts/namespaces/#basic","text":"The namespaces you use are derived from your settings (settings wheel left of the input field). For instance, having set language: English country: Unites States your namespaces will be: o ( planet namespace) en (English language) .us (USA)","title":"Basic"},{"location":"shortcuts/namespaces/#advanced-with-your-github-account","text":"Your namespaces are derived from your config.yml . With your personal configuration, you can use more than 3 namespaces. This can be useful when you like to use shortcuts from multiple languages and countries, e.g. dictionaries or public transport while travelling.","title":"Advanced (with your Github account)"},{"location":"shortcuts/namespaces/#priority-of-namespaces","text":"The lower a namespace is in the namespaces list, the higher it's precedence. This is similar to Object-oriented programming , when a method needs to be picked from inheriting classes. So in the example before, shortcuts from .us override those from en , and both those from o .","title":"Priority of namespaces"},{"location":"shortcuts/namespaces/#adding-a-namespace-and-overriding-language-or-country-setting","text":"You can add a certain namespace to the subscribed namespaces by prefixing the query with [namespace]. If [namespace] happens to be a language or country namespace, it will also override the current language or country.","title":"Adding a namespace (and overriding language or country setting)"},{"location":"shortcuts/namespaces/#example","text":"","title":"Example"},{"location":"shortcuts/namespaces/#settings","text":"Let's assume we use Trovu with these settings : language: en country: us namespaces: - o - en - .us","title":"Settings"},{"location":"shortcuts/namespaces/#query","text":"Now we call this query: de.w berlin Here, we add the namespace de . This means that for this very query the de namespace is added to the namespaces list, with the highest priority. Also, since de is a language, the language setting is changed to de . So this query is now processed as if the settings were: language: de country: us namespaces: - o - en - .us - de","title":"Query"},{"location":"shortcuts/namespaces/#result","text":"Instead of the English Wikipedia (that would have been used with language: en ), the German Wikipedia is used, because language is now set to de , and the Wikipedia shortcut's URL is defined as url: https://{$language}.wikipedia.org/... . Had another shortcut w 1 existed in namespace de , then this shortcut would have been called, because we had added this namespaces to the subscribed namespaces, with the highest priority.","title":"Result"},{"location":"shortcuts/namespaces/#default-language-and-country","text":"Calling the homepage URL without any namespaces will set the default language and country based on navigator.language .","title":"Default language and country"},{"location":"shortcuts/urls/","text":"Shortcut URLs A shortcut URL may contain placeholders. This page is about them. Example Consider for instance the URL of the Google shortcut: url: https://www.google.com/search?hl={$language}&q={%query}&ie=utf-8 It contains 2 placeholders: {%query} and {$language} . Placeholders Placeholders are either arguments (starting with % ): Then they are replaced with the input from the current query, variables (starting with $ ): Then they are replaced with settings from the current configuration. Argument placeholders Example Will be replaced with {%foobar} argument from query. If there is more than one argument placeholder, their order in URL also defines the expected order in the shortcut query. {%foobar\\|encoding=iso-8859-1} ... with encoding specified. See Input encoding below. {%Datum\\|type=date\\|output=Y-m-d} {%Ziel\\|type=city} ... with a specified type. See Argument types below. {%IATA-Code\\|transform=uppercase} ... with a transformation definition. See Transforming below. Variable placeholders Example Will be replaced with {$language} configured language {$now\\|output=HH-mm} current date and time, attribute output defines the output format which must be based on dayjs's format . Default is HH-mm . Input encoding ... Argument types date The input will be parsed as a date. American and European inputs will be distinguished. An input containing only a number will be assumed as a day of month. A date in the future will be enforced. Also relative inputs are possible. Weekday abbreviations are understood, too. The language is assumed from the configured language. With the attribute output , an output format based on dayjs's format can be specified. Defaults to YYYY-MM-DD. Example input Example output Explanation 7.6. 2015-06-07 assumes German format 7/6 2015-07-06 assumes American format 7 2015-06-07 assumes current month & year 1 2015-07-01 enforced future date: increases month and even year if computed date would be in past otherwise +10 2015-06-17 today plus 10 days -5 2015-06-02 today minus 5 days mo 2015-06-08 next Monday time The input will be parsed as a time. Hours and minutes can be separated by . or : . It is allowed to only provide an hour. Relative hours work, too. With the attribute output , an output format based on dayjs's format can be specified. Defaults to HH:mm . Example input Example output Explanation 11.00 11:00 Hours and minutes 11 11:00 only hour given +2 13:00 2 hours from now city ... Transforming Finally, with {%foo|transform=uppercase} the output string can be transformed. Property Conversion Example input Example output Explanation uppercase The output will be uppercased. sxf SXF Makes sure all letters are uppercase. lowercase The output will be lowercased. Sxf sxf Makes sure all letters are lowercase. eo-cx cx gx hx jx sx ux to \u0109 \u011d \u0125 \u0135 \u015d \u016d ehxosxangxo cxiujxauxde e\u0125o\u015dan\u011do \u0109iu\u0135a\u016dde Converts transcribed Esperanto characters. Filling and submitting with userscripts If a website does not allow passing arguments via (GET) parameters, a solution can be targetting the search form, and then letting the fields fill by a userscript .","title":"Shortcut URLs"},{"location":"shortcuts/urls/#shortcut-urls","text":"A shortcut URL may contain placeholders. This page is about them.","title":"Shortcut URLs"},{"location":"shortcuts/urls/#example","text":"Consider for instance the URL of the Google shortcut: url: https://www.google.com/search?hl={$language}&q={%query}&ie=utf-8 It contains 2 placeholders: {%query} and {$language} .","title":"Example"},{"location":"shortcuts/urls/#placeholders","text":"Placeholders are either arguments (starting with % ): Then they are replaced with the input from the current query, variables (starting with $ ): Then they are replaced with settings from the current configuration.","title":"Placeholders"},{"location":"shortcuts/urls/#argument-placeholders","text":"Example Will be replaced with {%foobar} argument from query. If there is more than one argument placeholder, their order in URL also defines the expected order in the shortcut query. {%foobar\\|encoding=iso-8859-1} ... with encoding specified. See Input encoding below. {%Datum\\|type=date\\|output=Y-m-d} {%Ziel\\|type=city} ... with a specified type. See Argument types below. {%IATA-Code\\|transform=uppercase} ... with a transformation definition. See Transforming below.","title":"Argument placeholders"},{"location":"shortcuts/urls/#variable-placeholders","text":"Example Will be replaced with {$language} configured language {$now\\|output=HH-mm} current date and time, attribute output defines the output format which must be based on dayjs's format . Default is HH-mm .","title":"Variable placeholders"},{"location":"shortcuts/urls/#input-encoding","text":"...","title":"Input encoding"},{"location":"shortcuts/urls/#argument-types","text":"","title":"Argument types"},{"location":"shortcuts/urls/#date","text":"The input will be parsed as a date. American and European inputs will be distinguished. An input containing only a number will be assumed as a day of month. A date in the future will be enforced. Also relative inputs are possible. Weekday abbreviations are understood, too. The language is assumed from the configured language. With the attribute output , an output format based on dayjs's format can be specified. Defaults to YYYY-MM-DD. Example input Example output Explanation 7.6. 2015-06-07 assumes German format 7/6 2015-07-06 assumes American format 7 2015-06-07 assumes current month & year 1 2015-07-01 enforced future date: increases month and even year if computed date would be in past otherwise +10 2015-06-17 today plus 10 days -5 2015-06-02 today minus 5 days mo 2015-06-08 next Monday","title":"date"},{"location":"shortcuts/urls/#time","text":"The input will be parsed as a time. Hours and minutes can be separated by . or : . It is allowed to only provide an hour. Relative hours work, too. With the attribute output , an output format based on dayjs's format can be specified. Defaults to HH:mm . Example input Example output Explanation 11.00 11:00 Hours and minutes 11 11:00 only hour given +2 13:00 2 hours from now","title":"time"},{"location":"shortcuts/urls/#city","text":"...","title":"city"},{"location":"shortcuts/urls/#transforming","text":"Finally, with {%foo|transform=uppercase} the output string can be transformed. Property Conversion Example input Example output Explanation uppercase The output will be uppercased. sxf SXF Makes sure all letters are uppercase. lowercase The output will be lowercased. Sxf sxf Makes sure all letters are lowercase. eo-cx cx gx hx jx sx ux to \u0109 \u011d \u0125 \u0135 \u015d \u016d ehxosxangxo cxiujxauxde e\u0125o\u015dan\u011do \u0109iu\u0135a\u016dde Converts transcribed Esperanto characters.","title":"Transforming"},{"location":"shortcuts/urls/#filling-and-submitting-with-userscripts","text":"If a website does not allow passing arguments via (GET) parameters, a solution can be targetting the search form, and then letting the fields fill by a userscript .","title":"Filling and submitting with userscripts"},{"location":"shortcuts/userscripts/","text":"Userscripts fill-and-submit Userscript for auto-filling and submitting forms on target websites. This may help when queries cannot passed by URL. Then one can define inputs by their CSS selectors that shall be filled with URL-passed arguments once the destination website is loaded, and a form button that shall be clicked automatically by Javascript. For users Requirements for Firefox: Greasemonkey for Chrome: Tampermonkey Install In your browser, open https://www.trovu.net/userscripts/fill-and-submit.user.js There should be a dialog opening that offers to install the user script. Install and you are done. For shortcut editors Creating shortcut that use the userscript The shortcut URL should look like this (linebreaks only for clarity): https://patentscope.wipo.int/search/en/search.jsf# trovu[fill][%23simpleSearchForm\\:fpSearch\\:input]={%query}& trovu[submit]=%5Bid%5E%3D%22simpleSearchForm%3AfpSearch%3Aj%22%5D So to make use of the userscript, add a hash parameter (after a # ), called trovu . It must contain the properties [fill] and [submit] . Given the example above, it: calls the URL fills input field found with CSS selector #simpleSearchForm:fpSearch:input with value from {%query} submits form with submit button selected by [id^=\"simpleSearchForm:fpSearch:j\"] Documentation: trovu[fill] : array containing selectors and values trovu[fill][selector1]=value1 trovu[fill][selector2]=value2 ... trovu[submit] : string with selector of element to click on. Notation: selector string must escape some chars: : = \\: . = \\. # = %23 For developers Edit and install Edit src/js/userscripts/fill-and-submit.user.js npm run deploy will also deploy fill-and-submit.user.js .","title":"Userscripts"},{"location":"shortcuts/userscripts/#userscripts","text":"","title":"Userscripts"},{"location":"shortcuts/userscripts/#fill-and-submit","text":"Userscript for auto-filling and submitting forms on target websites. This may help when queries cannot passed by URL. Then one can define inputs by their CSS selectors that shall be filled with URL-passed arguments once the destination website is loaded, and a form button that shall be clicked automatically by Javascript.","title":"fill-and-submit"},{"location":"shortcuts/userscripts/#for-users","text":"","title":"For users"},{"location":"shortcuts/userscripts/#requirements","text":"for Firefox: Greasemonkey for Chrome: Tampermonkey","title":"Requirements"},{"location":"shortcuts/userscripts/#install","text":"In your browser, open https://www.trovu.net/userscripts/fill-and-submit.user.js There should be a dialog opening that offers to install the user script. Install and you are done.","title":"Install"},{"location":"shortcuts/userscripts/#for-shortcut-editors","text":"","title":"For shortcut editors"},{"location":"shortcuts/userscripts/#creating-shortcut-that-use-the-userscript","text":"The shortcut URL should look like this (linebreaks only for clarity): https://patentscope.wipo.int/search/en/search.jsf# trovu[fill][%23simpleSearchForm\\:fpSearch\\:input]={%query}& trovu[submit]=%5Bid%5E%3D%22simpleSearchForm%3AfpSearch%3Aj%22%5D So to make use of the userscript, add a hash parameter (after a # ), called trovu . It must contain the properties [fill] and [submit] . Given the example above, it: calls the URL fills input field found with CSS selector #simpleSearchForm:fpSearch:input with value from {%query} submits form with submit button selected by [id^=\"simpleSearchForm:fpSearch:j\"]","title":"Creating shortcut that use the userscript"},{"location":"shortcuts/userscripts/#documentation","text":"trovu[fill] : array containing selectors and values trovu[fill][selector1]=value1 trovu[fill][selector2]=value2 ... trovu[submit] : string with selector of element to click on.","title":"Documentation:"},{"location":"shortcuts/userscripts/#notation-selector-string-must-escape-some-chars","text":": = \\: . = \\. # = %23","title":"Notation: selector string must escape some chars:"},{"location":"shortcuts/userscripts/#for-developers","text":"","title":"For developers"},{"location":"shortcuts/userscripts/#edit-and-install","text":"Edit src/js/userscripts/fill-and-submit.user.js npm run deploy will also deploy fill-and-submit.user.js .","title":"Edit and install"},{"location":"users/advanced/","text":"Advanced settings & personal shortcuts You can create and manage your own user shortcuts and set advanced settings: If you don't have one, create a Github.com account . It is free. Fork trovu-data-user into your own Github account. In there, adjust config.yml to your needs, and add your own shortcuts to shortcuts.yml . (Both are YAML files .) Call Trovu with https://trovu.net/?#github=YOUR_GITHUB_USERNAME Custom configuration You may adjust config.yml to your needs. Namespaces namespaces: - o - en - .us - github: john-doe name: john - github: . name: my This is an array of the namespaces you want to use. Every entry may be either a string: Then it refers to an (official) site namespace, i.e. one in the trovu-data repository. Shortcuts in there are curated by the Trovu community. key/value pairs, then they refer to a custom namespace, e.g. your (or someone else's) user namespace in Github. Every entry must contain: github: A Github user name, or a dot (optional) name: Some custom name (default: value from github: ) The dot will refer to the current GitHub user (where this config.yml is located). The order is also relevant: The later the namespace appears in the list, the higher priority it has. So in the example above, shortcuts in my have highest precedence. Default keyword defaultKeyword: g If no keyword is recognized in a query, this one will be used. Useful for setting up a much used shortcut. Language language: en For Wikipedia in your language (or other shortcuts using {$language} ). Basically, it fills the {$language} variable in the shortcut URLs. Now, using the w shortcut will get you to the Wikipedia in your language, as its shortcut URL is set as https://{$language}.wikipedia.org/ . Country country: de For shortcuts that use {$country} in their URL. Works similarly as {$language} . Personal shortcuts Add personal shortcuts to shortcuts.yml . Your shortcuts are an associative array, with KEYWORD ARGUMENT_COUNT as its key. Keys must be unique. For the value, there is a short and a long notation possible. Short notation This shortcut will match for examplekeyword with no arguments: examplekeyword 0: http://www.example.com/ This shortcut will match for examplekeyword foo , so for the same keyword but with one argument: examplekeyword 1: http://www.example.com/?q={%query} And with more arguments: examplekeyword foo, bar : examplekeyword 2: http://www.example.com/?q={%query}&p={%puery} Long notation In the long notation, you can also define title, description and tags: examplekeyword 2: url: http://www.example.com/?q={%query}&p={%puery} title: Custom shortcut description: My custom shortcut with the keyword examplekeyword and 2 arguments. tags: - example","title":"Advanced settings & personal shortcuts"},{"location":"users/advanced/#advanced-settings-personal-shortcuts","text":"You can create and manage your own user shortcuts and set advanced settings: If you don't have one, create a Github.com account . It is free. Fork trovu-data-user into your own Github account. In there, adjust config.yml to your needs, and add your own shortcuts to shortcuts.yml . (Both are YAML files .) Call Trovu with https://trovu.net/?#github=YOUR_GITHUB_USERNAME","title":"Advanced settings &amp; personal shortcuts"},{"location":"users/advanced/#custom-configuration","text":"You may adjust config.yml to your needs.","title":"Custom configuration"},{"location":"users/advanced/#namespaces","text":"namespaces: - o - en - .us - github: john-doe name: john - github: . name: my This is an array of the namespaces you want to use. Every entry may be either a string: Then it refers to an (official) site namespace, i.e. one in the trovu-data repository. Shortcuts in there are curated by the Trovu community. key/value pairs, then they refer to a custom namespace, e.g. your (or someone else's) user namespace in Github. Every entry must contain: github: A Github user name, or a dot (optional) name: Some custom name (default: value from github: ) The dot will refer to the current GitHub user (where this config.yml is located). The order is also relevant: The later the namespace appears in the list, the higher priority it has. So in the example above, shortcuts in my have highest precedence.","title":"Namespaces"},{"location":"users/advanced/#default-keyword","text":"defaultKeyword: g If no keyword is recognized in a query, this one will be used. Useful for setting up a much used shortcut.","title":"Default keyword"},{"location":"users/advanced/#language","text":"language: en For Wikipedia in your language (or other shortcuts using {$language} ). Basically, it fills the {$language} variable in the shortcut URLs. Now, using the w shortcut will get you to the Wikipedia in your language, as its shortcut URL is set as https://{$language}.wikipedia.org/ .","title":"Language"},{"location":"users/advanced/#country","text":"country: de For shortcuts that use {$country} in their URL. Works similarly as {$language} .","title":"Country"},{"location":"users/advanced/#personal-shortcuts","text":"Add personal shortcuts to shortcuts.yml . Your shortcuts are an associative array, with KEYWORD ARGUMENT_COUNT as its key. Keys must be unique. For the value, there is a short and a long notation possible.","title":"Personal shortcuts"},{"location":"users/advanced/#short-notation","text":"This shortcut will match for examplekeyword with no arguments: examplekeyword 0: http://www.example.com/ This shortcut will match for examplekeyword foo , so for the same keyword but with one argument: examplekeyword 1: http://www.example.com/?q={%query} And with more arguments: examplekeyword foo, bar : examplekeyword 2: http://www.example.com/?q={%query}&p={%puery}","title":"Short notation"},{"location":"users/advanced/#long-notation","text":"In the long notation, you can also define title, description and tags: examplekeyword 2: url: http://www.example.com/?q={%query}&p={%puery} title: Custom shortcut description: My custom shortcut with the keyword examplekeyword and 2 arguments. tags: - example","title":"Long notation"},{"location":"users/integration/","text":"Use Trovu on your device Desktop web browser Firefox Open trovu.net , either with your Github user name or without: https://trovu.net/?#github=YOUR_GITHUB_USERNAME , or https://trovu.net/?#country=gb&language=en . (adjust to your country & language) In the browser address bar , right-click. Select Add \"Trovu\" . It is the last item. Open a new tab with the URL: about:preferences#search Under Default Search Engine , select Trovu . Chrome Open trovu.net , either with your Github user name or without: https://trovu.net/?#github=YOUR_GITHUB_USERNAME , or https://trovu.net/?#country=gb&language=en . (adjust to your country & language) Open a new tab with the URL: chrome://settings/searchEngines There, right to Manage search engines is a search field. Search for Trovu . When found, click the 3 dots right to it. Select Make default . Other Use one of these URL templates and add it where your browser allows to set custom browser search engines: https://trovu.net/process/?#country=gb&language=en&query=%s https://trovu.net/process/?#github=YOUR_GITHUB_USERNAME&query=%s (Note the process/ part in the URL! You may need to adjust your country , language or github parameter.) Android SearchBar Ex - Search Widget This a free, generic app to search any search engine that supports URL with a %s placeholder. With your Android device, visit the app in the Play store Install it on your device. Open the app. Left to the search input, click on the icon. At the botton, click + Add Select Search Select Custom Search For name , enter \"Trovu\" For URL , enter a URL template like in Browser / other . Click the back button of the app in the upper left corner Now, you can enter Trovu queries which will be redirected to your browser. Firefox for Android Firefox allows to add custom search engines: Any URL with a %s placeholder works. Tap on the address bar Tap on \ud83d\udd0d Search engine Tap on \u2699\ufe0f Search engine settings Tap on \u2795 Add search engine Tap on Other Enter a name, e.g. Trovu Enter the template URL, like for Other Tap on \u2714 (in the upper right corner) Here is an example setting for the user georgjaehnig :","title":"Use Trovu on your device"},{"location":"users/integration/#use-trovu-on-your-device","text":"","title":"Use Trovu on your device"},{"location":"users/integration/#desktop-web-browser","text":"","title":"Desktop web browser"},{"location":"users/integration/#firefox","text":"Open trovu.net , either with your Github user name or without: https://trovu.net/?#github=YOUR_GITHUB_USERNAME , or https://trovu.net/?#country=gb&language=en . (adjust to your country & language) In the browser address bar , right-click. Select Add \"Trovu\" . It is the last item. Open a new tab with the URL: about:preferences#search Under Default Search Engine , select Trovu .","title":"Firefox"},{"location":"users/integration/#chrome","text":"Open trovu.net , either with your Github user name or without: https://trovu.net/?#github=YOUR_GITHUB_USERNAME , or https://trovu.net/?#country=gb&language=en . (adjust to your country & language) Open a new tab with the URL: chrome://settings/searchEngines There, right to Manage search engines is a search field. Search for Trovu . When found, click the 3 dots right to it. Select Make default .","title":"Chrome"},{"location":"users/integration/#other","text":"Use one of these URL templates and add it where your browser allows to set custom browser search engines: https://trovu.net/process/?#country=gb&language=en&query=%s https://trovu.net/process/?#github=YOUR_GITHUB_USERNAME&query=%s (Note the process/ part in the URL! You may need to adjust your country , language or github parameter.)","title":"Other"},{"location":"users/integration/#android","text":"","title":"Android"},{"location":"users/integration/#searchbar-ex-search-widget","text":"This a free, generic app to search any search engine that supports URL with a %s placeholder. With your Android device, visit the app in the Play store Install it on your device. Open the app. Left to the search input, click on the icon. At the botton, click + Add Select Search Select Custom Search For name , enter \"Trovu\" For URL , enter a URL template like in Browser / other . Click the back button of the app in the upper left corner Now, you can enter Trovu queries which will be redirected to your browser.","title":"SearchBar Ex - Search Widget"},{"location":"users/integration/#firefox-for-android","text":"Firefox allows to add custom search engines: Any URL with a %s placeholder works. Tap on the address bar Tap on \ud83d\udd0d Search engine Tap on \u2699\ufe0f Search engine settings Tap on \u2795 Add search engine Tap on Other Enter a name, e.g. Trovu Enter the template URL, like for Other Tap on \u2714 (in the upper right corner) Here is an example setting for the user georgjaehnig :","title":"Firefox for Android"},{"location":"users/processing/","text":"How a query is processed The purpose of a query is to match with a shortcut. And shortcuts are organized by Namespaces : Every shortcut belongs exactly to one namespace. Namespace setting When calling Trovu without query parameters, 3 default namespaces will be set based on the browser's language settings. For instance, if the browser's language is de-DE , we will use these namespaces and their shortcut files: o.yml \u2013 planet namespace de.yml \u2013 German language namespace .de.yml \u2013 Germany namespace Processing a query Now, let's look at the processing of a query: A query comes in, e.g. g foobar . The current namespace setting is o,de,.de . Given the namespaces, all the shortcuts are fetched from their YAML files into a Javascript variable in the client. The fetch() call checks also if the files are already in the browser cache, and only requests them from remote if they are not cached yet. To reload the shortcuts, use the reload command (see below). The query is parsed \u2013 in the client by Javascript \u2013 into keyword: g argument: foobar Based on the query and the namespace settings, the loaded shortcuts are searched whether they match a query with the keyword g and one argument, i.e. if they contain a shortcut keyed with g 1 . We find 2 matches: one in o , pointing to google.com and one in .de , pointing to google.de From the found matches, the results are evaluated in namespace order. Since namespace .de has higher priority than o , its URL is used for further processing https://www.google.de/search?hl={$language}&q={%query}&ie=utf-8 The {$language} placeholder is being replaced with the variable de . The {%query} placeholder is being replaced with the query argument foobar . A redirect to the URL is made. Reloading shortcuts Since shortcuts are cached in the browser cache, you may want to reload them once they got updated. Do so by either prefixing a query: reload:g foobar or only calling reload .","title":"How a query is processed"},{"location":"users/processing/#how-a-query-is-processed","text":"The purpose of a query is to match with a shortcut. And shortcuts are organized by Namespaces : Every shortcut belongs exactly to one namespace.","title":"How a query is processed"},{"location":"users/processing/#namespace-setting","text":"When calling Trovu without query parameters, 3 default namespaces will be set based on the browser's language settings. For instance, if the browser's language is de-DE , we will use these namespaces and their shortcut files: o.yml \u2013 planet namespace de.yml \u2013 German language namespace .de.yml \u2013 Germany namespace","title":"Namespace setting"},{"location":"users/processing/#processing-a-query","text":"Now, let's look at the processing of a query: A query comes in, e.g. g foobar . The current namespace setting is o,de,.de . Given the namespaces, all the shortcuts are fetched from their YAML files into a Javascript variable in the client. The fetch() call checks also if the files are already in the browser cache, and only requests them from remote if they are not cached yet. To reload the shortcuts, use the reload command (see below). The query is parsed \u2013 in the client by Javascript \u2013 into keyword: g argument: foobar Based on the query and the namespace settings, the loaded shortcuts are searched whether they match a query with the keyword g and one argument, i.e. if they contain a shortcut keyed with g 1 . We find 2 matches: one in o , pointing to google.com and one in .de , pointing to google.de From the found matches, the results are evaluated in namespace order. Since namespace .de has higher priority than o , its URL is used for further processing https://www.google.de/search?hl={$language}&q={%query}&ie=utf-8 The {$language} placeholder is being replaced with the variable de . The {%query} placeholder is being replaced with the query argument foobar . A redirect to the URL is made.","title":"Processing a query"},{"location":"users/processing/#reloading-shortcuts","text":"Since shortcuts are cached in the browser cache, you may want to reload them once they got updated. Do so by either prefixing a query: reload:g foobar or only calling reload .","title":"Reloading shortcuts"},{"location":"users/support/","text":"Support Here you can find support: Some problems may be listed in Troubleshooting . Ask any Trovu-related question in the Telegram group: https://t.me/trovu_net Or send an email: info@trovu.net","title":"Support"},{"location":"users/support/#support","text":"Here you can find support: Some problems may be listed in Troubleshooting . Ask any Trovu-related question in the Telegram group: https://t.me/trovu_net Or send an email: info@trovu.net","title":"Support"},{"location":"users/troubleshooting/","text":"Troubleshooting General Reload Config and shortcut files are usually only fetched once, and after that are only taken from the browser cache. So if you have made changes to one of them, you need to reload them. You can reload by: prefixing your query with reload: , e.g. reload:g foobar sending a query only containing reload opening the Trovu homepage with https://trovu.net/?#reload=1. Debugging mode Enter debugging mode with https://trovu.net/?#debug=1 , or a query starting with debug: , e.g.: debug:g foobar In debug, all the processing will be done \u2013 but without the actual redirect. You will be able to see which config and shortcut URLs are being fetched whether they are found in the browser cache or not how a query got matched. You can also combine debugging and reloading, e.g. debug:reload:g foobar FAQ I Edited a Shortcut, but It Has No Effect This might be a caching issue. First of all, make sure if your edit arrived in https://data.trovu.net/data/data.json . It should get updated automatically by a Github webhook on the git push event. Then, you can either call a query containing only reload . call your query prefixed with reload: , e.g. reload:g foobar . Both will cause your browser to reload the shortcut files from data.trovu.net . If that did not help, try debugging mode (see above). And if that did not help, clear your browser cache. There are extensions that make this easy, such as Clear Cache for Firefox or Clear Cache for Chrome.","title":"Troubleshooting"},{"location":"users/troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"users/troubleshooting/#general","text":"","title":"General"},{"location":"users/troubleshooting/#reload","text":"Config and shortcut files are usually only fetched once, and after that are only taken from the browser cache. So if you have made changes to one of them, you need to reload them. You can reload by: prefixing your query with reload: , e.g. reload:g foobar sending a query only containing reload opening the Trovu homepage with https://trovu.net/?#reload=1.","title":"Reload"},{"location":"users/troubleshooting/#debugging-mode","text":"Enter debugging mode with https://trovu.net/?#debug=1 , or a query starting with debug: , e.g.: debug:g foobar In debug, all the processing will be done \u2013 but without the actual redirect. You will be able to see which config and shortcut URLs are being fetched whether they are found in the browser cache or not how a query got matched. You can also combine debugging and reloading, e.g. debug:reload:g foobar","title":"Debugging mode"},{"location":"users/troubleshooting/#faq","text":"","title":"FAQ"},{"location":"users/troubleshooting/#i-edited-a-shortcut-but-it-has-no-effect","text":"This might be a caching issue. First of all, make sure if your edit arrived in https://data.trovu.net/data/data.json . It should get updated automatically by a Github webhook on the git push event. Then, you can either call a query containing only reload . call your query prefixed with reload: , e.g. reload:g foobar . Both will cause your browser to reload the shortcut files from data.trovu.net . If that did not help, try debugging mode (see above). And if that did not help, clear your browser cache. There are extensions that make this easy, such as Clear Cache for Firefox or Clear Cache for Chrome.","title":"I Edited a Shortcut, but It Has No Effect"}]}