{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"trovu.net \u2013 Web shortcuts, social, private.","text":"<p>Trovu is the successor of Serchilo / FindFind.it. Read about the differences.</p> <p>trovu allows you to define shortcuts for URLs / websites and then quickly access them in a command-line way, e.g.</p> <ul> <li><code>g berlin</code> \u2013 search Google for \"berlin\".</li> <li><code>w berlin</code> \u2013 Wikipedia article for \"berlin\" in your language.</li> <li><code>gd london, liverpool</code> \u2013 find a route on Google Maps from London to Liverpool.</li> </ul>"},{"location":"index.html#key-features","title":"Key features","text":"<ul> <li>Privacy: Queries are processed in the client, not server.</li> <li>Social: Curated shortcuts are kept in YAML files in a public Github repository. Send a pull request to add or edit them.</li> <li>Freedom: Optionally, create personal shortcuts in your own repository.</li> </ul>"},{"location":"index.html#read-more","title":"Read more","text":"<ul> <li>Namespaces</li> <li>How a query is processed</li> <li>Includes</li> <li>Shortcut URLs</li> <li>Advanced settings &amp; personal shortcuts</li> <li>Trovu compared to Serchilo / FindFind.it</li> <li>Migrate from FindFind.it</li> <li>Troubleshooting / FAQ</li> <li>Support</li> </ul>"},{"location":"index.html#repositories","title":"Repositories","text":""},{"location":"index.html#trovu-data","title":"trovu-data","text":"<p>This repository contains all the data, e.g.</p> <ul> <li>shortcuts</li> <li>types/city<ul> <li>mappings for argument type city</li> </ul> </li> </ul> <p>Fork this repository to add or edit shortcuts (and send then a pull request).</p>"},{"location":"index.html#trovu","title":"trovu","text":"<p>This (future mono-)repository contains now the web frontend and this documentation.</p>"},{"location":"index.html#live-web-version","title":"Live web version","text":"<p>https://trovu.net/</p>"},{"location":"presentations.html","title":"Presentations","text":"<ul> <li>FOSSASIA 2019: pdf</li> </ul>"},{"location":"privacy.html","title":"Privacy policy","text":"<p>Trovu does not log your personal information.</p> <p>In particular:</p> <ul> <li>We do not record IP addresses.</li> <li>We do not record search queries.</li> <li>We do not serve cookies.</li> </ul>"},{"location":"editors/policy.html","title":"Content policy","text":"<p>This page is about which shortcuts may be in the curated repository trovu-data, and how they should look like.</p> <p>Note that you can add any shortcut to your user repository, completely ignoring this policy.</p> <p>Caveat: You might note that many curated shortcuts at this moment don't match the listed criteria. This is because Trovu's first version (named Serchilo) has existed since 2005, with user-created shortcuts available since 2007, and this policy started to be written in 2023. Thus, the goal is to finally define some standards and then slowly applying them, with as little as possible breaking of existing user habits.</p>"},{"location":"editors/policy.html#shortcuts","title":"Shortcuts","text":""},{"location":"editors/policy.html#avoid-pure-bookmark-shortcuts","title":"Avoid pure bookmark shortcuts","text":"<p>Bookmark shortcuts refer to shortcuts with 0 arguments, e.g.:</p> <pre><code>g 0:\n  url: https://www.google.com/search?hl={$language}\n  title: Google Web Homepage\n</code></pre> <p>You use it by simply entering <code>g</code> and hitting Enter.</p> <p>This shortcut to the Google Web Homepage is fine because it is not alone: There is also a shortcut for the Google Websearch <code>g 1</code>.</p> <p>But a bookmark shortcut that has no corresponding 1-or-more-argument shortcut should be avoided. You may put them into your user shortcuts.</p>"},{"location":"editors/policy.html#keywords","title":"Keywords","text":""},{"location":"editors/policy.html#avoid-common-words","title":"Avoid common words","text":"<p>Many users use Trovu with a default keyword: They can enter any query, and if it's not matched with a shortcut, the default keyword will be used \u2013 often it refers to Google.</p> <p>Thus, such users often perform their Google searches without <code>g</code> \u2013 because it will be applied automatically if not shortcut is found.</p> <p>However, if there is a shortcut with a keyword <code>apple</code> or <code>app</code>, this breaks.</p> <p>This is why we want to avoid such common words as keywords:</p> <ul> <li>Instead of <code>app</code>, we use <code>gpa</code> (Google Play App search), and</li> <li>instead of <code>apple</code>, we use <code>apl</code> (omitting the vowels, shorter)</li> </ul>"},{"location":"editors/policy.html#abbreviate-properly","title":"Abbreviate properly","text":"<p>The rule of thumb: The more popular the website, the shorter may be its keyword. If we abbreviate, here are the rules.</p>"},{"location":"editors/policy.html#1-letter-keywords-only-for-top-50","title":"1-letter keywords: Only for top 50","text":"<p>The English alphabet has 26 latin letters. Keyword of only 1 letter should therefore be only applied if the website belongs to the top 50 in visitor's count of the world (namespace <code>o</code>), to minimize the likelihood of clashes.</p> <p>If the shortcut shall belong to a language or country namespace, then its website should be top 50 of that country.</p>"},{"location":"editors/policy.html#2-letter-keywords-language-codes-have-priority","title":"2-letter keywords: Language codes have priority","text":"<p>A keyword with 2 letters shall be used for a dictionary of that language, using its ISO-639-1 language code (e.g. <code>en</code>, <code>fr</code>, <code>be</code>). Such shortcuts should be put into a language namespace.</p> <p>If the shortcut is not about a dictionary, then it should not use a ISO-639-1 language code. This is to keep the space for a potential future dictionary shortcut.</p>"},{"location":"editors/policy.html#abbreviate-by-first-sounds-of-words-andor-syllables","title":"Abbreviate by first sounds of words and/or syllables","text":"<p>A good keyword shall be easily memorable, and also not a word itself. We try to achieve this by taking the first letters of the website's name (if it contains multiple words) or syllables. For example:</p> <ul> <li><code>fb</code> for FaceBook</li> <li><code>db</code> for Deutsche Bahn</li> <li><code>ad</code> for AnDroid</li> <li><code>bmf</code> for Besser MitFahren</li> <li><code>bmn</code> for BugMeNot</li> </ul>"},{"location":"legacy/differences.html","title":"Differences to Serchilo and FindFind.it","text":"<p>Trovu is the official successor of Serchilo / FindFind.it. FindFind.it will be closed latest in October 2023, with the end of life of Drupal 7.</p> <p>If you know FindFind.it, then you almost know how Trovu works. However, a few things are different:</p> <ul> <li>Main difference: search queries are not sent out to the server, all processing is done in the client.<ul> <li>This means much more privacy.</li> </ul> </li> <li>Country namespaces are not 3-letter but 2-letter-codes, prefixed with a dot, e.g.<ul> <li><code>.de</code>, not <code>deu</code></li> <li><code>.pl</code>, not <code>pol</code></li> </ul> </li> <li>Instead in a server database, shortcuts are kept in YAML files, in a separate GitHub repository. There, we can stand on Git's shoulders to keep track of shortcut additions and changes. Pull and merge requests are welcome.</li> <li>Once you open Trovu, all shortcuts are loaded into your client and remain cached there, (until you reload). So even if the Trovu server is down, you can keep using Trovu.</li> <li>If you have personal user shortcuts, for Trovu you host them on your Github account.<ul> <li>Potentially, this allows us to have private/secret user shortcuts in the future: Instead on Github, you could host on your own server, behind password protection, e.g. <code>https://user:password@example.com/my_trovu/shortcuts.yml</code>. Not sure if there's a need, if so, please open a ticket.</li> </ul> </li> </ul> <p>Read more about how migrate from FindFind.it to Trovu.</p>"},{"location":"legacy/migrate.html","title":"Migrate from FindFind.it","text":"<p>FindFind.it will end its service in October December 2023, with the end of life of Drupal 7.</p> <p>But its successor trovu.net is already running. Trovu is a little different to FindFind.it / Serchilo.</p> <p>This page helps you how to switch to Trovu.</p> <p>Your migration depends on whether you used FindFind.it with or without a personal account.</p>"},{"location":"legacy/migrate.html#without-a-findfindit-account","title":"Without a FindFind.it account","text":"<p>Read how to use Trovu on your device. Make sure you set the correct language and country, either via the URL or Settings.</p>"},{"location":"legacy/migrate.html#with-a-findfindit-account","title":"With a FindFind.it account","text":"<p>In this case, you can migrate your settings and user shortcuts. It should not take longer than 5 minutes.</p> <p>You must have an account at Github. It is free.</p> <ol> <li>Log into Github.</li> <li>Open trovu-data-user.</li> <li>Fork trovu-data-user into your account. (You find the button on the upper right.)</li> <li>Within your newly forked repository (it should be under <code>https://github.com/YOUR_GITHUB_USERNAME/trovu-data-user</code>) , in the file list click on <code>config.yml</code> and then the \ud83d\udd8a icon on the upper right to edit it.</li> <li>In a new tab, log into your FindFind.it account.</li> <li>Go to My account \u27a1\ufe0f Edit.</li> <li>At the bottom, find the section Export to Trovu</li> <li>Replace the contents in the opened <code>config.yml</code> on Github with the contents of the config.yml field in FindFind.it.</li> <li>Click on Commit changes.</li> <li>Do the same for <code>shortcuts.yml</code>.</li> <li>Call Trovu with https://trovu.net/#github=YOUR_GITHUB_USERNAME</li> <li>Read how to use Trovu on your device.</li> </ol>"},{"location":"legacy/migrate.html#read-more","title":"Read more","text":"<ul> <li>Advanced settings &amp; personal shortcuts</li> </ul> <p>If you have problems or questions, get support.</p>"},{"location":"shortcuts/includes.html","title":"Includes","text":"<p>Includes allow to use the same shortcut properties in different shortcuts. They are heavily used for dictionary shortcuts.</p>"},{"location":"shortcuts/includes.html#simple-includes","title":"Simple includes","text":"<p>Includes are defined with <code>include:</code>. For example, dcm contains:</p> <pre><code>de-en 1:\n  url: https://www.dict.com/german-english/{%word}\n  title: German-English (dict.com)\n  tags:\n  - dictionary\n  - english\n  - german\n  - language\n  examples:\n    baum: English translation of \"baum\"\n    tree: German translation of \"tree\"\n</code></pre> <p>Additionally, there is:</p> <pre><code>en-de 1:\n  title: Englisch-Deutsch (dict.com)\n  include:\n    key: de-en 1\n  examples:\n    tree: Deutsch-\u00dcbersetzung von \"tree\"\n    baum: Englisch-\u00dcbersetzung von \"baum\"\n</code></pre> <p>Both are separate shortcuts and can be called individually. But <code>en-de 1</code> includes from <code>de-en 1</code> all properties that it does not define itself. In this case, these are <code>url:</code> and <code>tags:</code>.</p> <p>This way, the shortcut URL needs to be maintained only once.</p>"},{"location":"shortcuts/includes.html#includes-with-variables","title":"Includes with variables","text":"<p><code>include.key</code> may also use variables:</p> <pre><code>en 1:\n  include:\n    key: en-{$language} 1\n</code></pre> <p>If the language from settings is e.g. <code>de</code>, it includes from <code>en-de 1</code>. (And if <code>en-de 1</code> contains <code>include:</code>, it also includes from there, and so on.)</p>"},{"location":"shortcuts/includes.html#includes-from-another-namespace","title":"Includes from another namespace","text":"<p><code>include</code> may also include from another namespace:</p> <pre><code>en 1:\n  include:\n    key: en 1\n    namespace: leo\n</code></pre> <p>This can for example be set in one's user settings, to ensure using leo.org as the dictionary for English, no matter what is used in the site namespaces.</p>"},{"location":"shortcuts/includes.html#multiple-include-propositions","title":"Multiple include propositions","text":"<p><code>include:</code> may instead of only one <code>key:</code> (and <code>namespace:</code>) also contain several ones. For instance, in o we have:</p> <pre><code>ar 1:\n  include:\n  - key: ar 1\n    namespace: ard\n  - key: ar 1\n    namespace: dcm\n  - key: ar 1\n    namespace: bab\n  - key: ar 1\n    namespace: lgs\n  - key: ar 1\n    namespace: rvs\n  - key: ar 1\n    namespace: pka\n</code></pre> <p>This shortcut for an Arabic dictionary tries first to include from ard, the namespace for arabdict.com. And there also exists:</p> <pre><code>ar 1:\n  include:\n    key: ar-{$language} 1\n</code></pre> <p>However, this namespace only contains Arabic dictionaries for a few languages (<code>de</code>, <code>en</code>, <code>fr</code>, <code>it</code>, <code>tr</code>).</p> <p>If the user's language is e.g. <code>pl</code>, the include process will fail at this point, as there is no <code>ar-pl 1</code> in this namespace.</p> <p>In this case, the process goes back to o and tries the second entry:</p> <pre><code>  - key: ar 1\n    namespace: dcm\n</code></pre> <p>As dcm does contain <code>ar-pl 1</code>, this inclusion succeeds, and the Arabic dictionary is taken from dict.com.</p>"},{"location":"shortcuts/namespaces.html","title":"Namespaces","text":"<p>Every shortcut belongs to exactly one namespace. Namespaces allow the same keyword to be used for different shortcuts \u2013 according to the user's language, location or personal setup. This comes in handy e.g. for multi-country websites like Amazon:</p> <ul> <li><code>a shakespeare</code> shall search Amazon for books from Shakespeare \u2013 but Amazon from which country?</li> </ul> <p>Thanks to namespaces, we can have the keyword <code>a</code> both</p> <ul> <li>in the US country namespace <code>.us</code>,</li> <li>as also in the Germany namespace <code>.de</code></li> </ul> <p>Depending on the country in your settings and thus the namespaces you use, the correct shortcut for Amazon will be picked.</p> <p>But even more: You can also override shortcuts: For instance, while all other users use the keyword <code>g</code> for Google, you might use it for something else \u2013 with your user namespace.</p> <p>Namespaces work well together with Includes, especially for dictionaries.</p>"},{"location":"shortcuts/namespaces.html#namespace-types","title":"Namespace types","text":"Namespace type Example namespaces Naming convention Contains Example shortcuts language de, en 2 chars, by ISO 639-1 shortcuts related to a particular language Merriam-Webster dictionary: <code>mw tree</code> (from en) country .de, .us dot and 2 chars, by ISO 3166-1 alpha2 shortcuts related to a particular country Deutsche Bahn Fahrplanauskunft: <code>db berlin, hamburg</code> (from .de) dictionary dcm (dict.com), lge (Linguee) 3 chars, by their abbreviated name shortcuts from a dictionary website German-English: <code>de-en tree</code>, <code>en-de tree</code>, <code>en-{$language} tree</code> (using <code>language</code> variable from settings) user georgjaehnig a Github user name (can be overridden with a custom name) custom shortcuts created by a user in their repo Trains from my home station: <code>db&gt; hamburg</code> planet o the shape of the planet shortcuts unrelated to a language or country Google web search: <code>g berlin</code> <p><code>language</code>, <code>country</code>, <code>dictionary</code> and <code>o (planet)</code> are site namespaces. They are curated and here to find. (Pull requests are welcome.)</p>"},{"location":"shortcuts/namespaces.html#dictionary-namespaces","title":"Dictionary namespaces","text":"<p>Currently, the following dictionary namespaces are defined:</p> Namespace Dictionary <code>alm</code> Online Latein W\u00f6rterbuch <code>ard</code> arabdict <code>bab</code> bab.la <code>beo</code> BEOLINGUS <code>crd</code> croDict <code>dcc</code> dict.cc <code>dcm</code> Dictionary.com <code>deo</code> Dans-Esperanto ordbog <code>dtn</code> Deutsch-Tuerkisch.net <code>esd</code> SpanishDictionary.com <code>flx</code> Folkets lexikon <code>hzn</code> Heinzelnisse <code>irs</code> Irishionary.com <code>leo</code> leo.org <code>lge</code> Linguee <code>lgs</code> Langenscheidt <code>mdb</code> MDBG Chinese Dictionary <code>pka</code> pauker.at <code>pns</code> PONS dictionary <code>rvs</code> Reverso <code>umt</code> uitmuntend <code>wdk</code> Wadoku <code>zrg</code> Zargan"},{"location":"shortcuts/namespaces.html#uniqueness-in-a-namespace","title":"Uniqueness in a namespace","text":"<p>In a namespace, there can be only one shortcut with the same keyword and the same number of arguments: So in o, there is only one shortcut <code>g</code> with one argument, the Google web search.</p>"},{"location":"shortcuts/namespaces.html#using-namespaces","title":"Using namespaces","text":""},{"location":"shortcuts/namespaces.html#basic","title":"Basic","text":"<p>The namespaces you use are derived from your settings (settings wheel left of the input field). For instance, having set</p> <ul> <li>language: English</li> <li>country: Unites States</li> </ul> <p>your namespaces will be:</p> <ul> <li><code>o</code> (<code>planet</code> namespace)</li> <li><code>en</code> (English language)</li> <li><code>.us</code> (USA)</li> </ul>"},{"location":"shortcuts/namespaces.html#advanced-with-your-github-account","title":"Advanced (with your Github account)","text":"<p>Your namespaces are derived from your config.yml. With your personal configuration, you can use more than 3 namespaces. This can be useful when you like to use shortcuts from multiple languages and countries, e.g. dictionaries or public transport while travelling.</p>"},{"location":"shortcuts/namespaces.html#priority-of-namespaces","title":"Priority of namespaces","text":"<p>The lower a namespace is in the <code>namespaces</code> list, the higher it's precedence. This is similar to Object-oriented programming, when a method needs to be picked from inheriting classes.</p> <p>So in the example before, shortcuts from <code>.us</code> override those from <code>en</code>, and both those from <code>o</code>.</p>"},{"location":"shortcuts/namespaces.html#adding-a-namespace-and-overriding-language-or-country-setting","title":"Adding a namespace (and overriding <code>language</code> or <code>country</code> setting)","text":"<p>You can add a certain namespace to the subscribed namespaces by prefixing the query with <code>[namespace].</code> If <code>[namespace]</code> happens to be a language or country namespace, it will also override the current language or country.</p>"},{"location":"shortcuts/namespaces.html#example","title":"Example","text":""},{"location":"shortcuts/namespaces.html#settings","title":"Settings","text":"<p>Let's assume we use Trovu with these settings:</p> <pre><code>language: en\ncountry: us\nnamespaces:\n    - o\n    - en\n    - .us\n</code></pre>"},{"location":"shortcuts/namespaces.html#query","title":"Query","text":"<p>Now we call this query:</p> <pre><code>de.w berlin\n</code></pre> <p>Here, we add the namespace de. This means that for this very query</p> <ul> <li>the de namespace is added to the <code>namespaces</code> list, with the highest priority.</li> <li>Also, since <code>de</code> is a language, the language setting is changed to <code>de</code>.</li> </ul> <p>So this query is now processed as if the settings were:</p> <pre><code>language: de\ncountry: us\nnamespaces:\n    - o\n    - en\n    - .us\n    - de\n</code></pre>"},{"location":"shortcuts/namespaces.html#result","title":"Result","text":"<p>Instead of the English Wikipedia (that would have been used with <code>language: en</code>), the German Wikipedia is used, because <code>language</code> is now set to <code>de</code>, and the Wikipedia shortcut's URL is defined as <code>url: https://{$language}.wikipedia.org/...</code>.</p> <p>Had another shortcut <code>w 1</code> existed in namespace de, then this shortcut would have been called, because we had added this namespaces to the subscribed namespaces, with the highest priority.</p>"},{"location":"shortcuts/namespaces.html#default-language-and-country","title":"Default language and country","text":"<p>Calling the homepage URL without any namespaces will set the default language and country based on navigator.language.</p>"},{"location":"shortcuts/urls.html","title":"Shortcut URLs","text":"<p>A shortcut URL may contain placeholders. This page is about them.</p>"},{"location":"shortcuts/urls.html#example","title":"Example","text":"<p>Consider for instance the URL of the Google shortcut:</p> <pre><code>url: https://www.google.com/search?hl={$language}&amp;q={%query}&amp;ie=utf-8\n</code></pre> <p>It contains 2 placeholders: <code>{%query}</code> and <code>{$language}</code>.</p>"},{"location":"shortcuts/urls.html#placeholders","title":"Placeholders","text":"<p>Placeholders are either</p> <ul> <li>arguments (starting with <code>%</code>): Then they are replaced with the input from the current query,</li> <li>variables (starting with <code>$</code>): Then they are replaced with settings from the current configuration.</li> </ul>"},{"location":"shortcuts/urls.html#argument-placeholders","title":"Argument placeholders","text":"Example Will be replaced with <code>{%foobar}</code> argument from query. If there is more than one argument placeholder, their order in URL also defines the expected order in the shortcut query. <code>{%foobar\\|encoding=iso-8859-1}</code> ... with encoding specified. See Input encoding below. <code>{%Datum\\|type=date\\|output=Y-m-d}</code><code>{%Ziel\\|type=city}</code> ... with a specified type. See Argument types below. <code>{%IATA-Code\\|transform=uppercase}</code> ... with a transformation definition. See Transforming below."},{"location":"shortcuts/urls.html#variable-placeholders","title":"Variable placeholders","text":"Example Will be replaced with <code>{$language}</code> configured language <code>{$now\\|output=HH-mm}</code> current date and time, attribute <code>output</code> defines the output format which must be based on dayjs's format. Default is <code>HH-mm</code>."},{"location":"shortcuts/urls.html#input-encoding","title":"Input encoding","text":"<p>...</p>"},{"location":"shortcuts/urls.html#argument-types","title":"Argument types","text":""},{"location":"shortcuts/urls.html#date","title":"date","text":"<p>The input will be parsed as a date.</p> <ul> <li>American and European inputs will be distinguished.</li> <li>An input containing only a number will be assumed as a day of month.</li> <li>A date in the future will be enforced.</li> <li>Also relative inputs are possible.</li> <li>Weekday abbreviations are understood, too. The language is assumed from the configured language.</li> <li>With the attribute <code>output</code>, an output format based on dayjs's format can be specified. Defaults to YYYY-MM-DD.</li> </ul> Example input Example output Explanation <code>7.6.</code> <code>2015-06-07</code> assumes German format <code>7/6</code> <code>2015-07-06</code> assumes American format <code>7</code> <code>2015-06-07</code> assumes current month &amp; year <code>1</code> <code>2015-07-01</code> enforced future date: increases month and even year if computed date would be in past otherwise <code>+10</code> <code>2015-06-17</code> today plus 10 days <code>-5</code> <code>2015-06-02</code> today minus 5 days <code>mo</code> <code>2015-06-08</code> next Monday"},{"location":"shortcuts/urls.html#time","title":"time","text":"<p>The input will be parsed as a time.</p> <ul> <li>Hours and minutes can be separated by <code>.</code> or <code>:</code>.</li> <li>It is allowed to only provide an hour.</li> <li>Relative hours work, too.</li> <li>With the attribute <code>output</code>, an output format based on dayjs's format can be specified. Defaults to <code>HH:mm</code>.</li> </ul> Example input Example output Explanation <code>11.00</code> <code>11:00</code> Hours and minutes <code>11</code> <code>11:00</code> only hour given <code>+2</code> <code>13:00</code> 2 hours from now"},{"location":"shortcuts/urls.html#city","title":"city","text":"<p>...</p>"},{"location":"shortcuts/urls.html#transforming","title":"Transforming","text":"<p>Finally, with <code>{%foo|transform=uppercase}</code> the output string can be transformed.</p> Property Conversion Example input Example output Explanation <code>uppercase</code> The output will be uppercased. <code>sxf</code> <code>SXF</code> Makes sure all letters are uppercase. <code>lowercase</code> The output will be lowercased. <code>Sxf</code> <code>sxf</code> Makes sure all letters are lowercase. <code>eo-cx</code> <code>cx gx hx jx sx ux</code> to <code>\u0109 \u011d \u0125 \u0135 \u015d \u016d</code> <code>ehxosxangxo cxiujxauxde</code> <code>e\u0125o\u015dan\u011do \u0109iu\u0135a\u016dde</code> Converts transcribed Esperanto characters."},{"location":"shortcuts/urls.html#filling-and-submitting-with-userscripts","title":"Filling and submitting with userscripts","text":"<p>If a website does not allow passing arguments via (GET) parameters, a solution can be targetting the search form, and then letting the fields fill by a userscript.</p>"},{"location":"shortcuts/userscripts.html","title":"Userscripts","text":""},{"location":"shortcuts/userscripts.html#fill-and-submit","title":"fill-and-submit","text":"<p>Userscript for auto-filling and submitting forms on target websites. This may help when queries cannot passed by URL. Then one can define inputs by their CSS selectors that shall be filled with URL-passed arguments once the destination website is loaded, and a form button that shall be clicked automatically by Javascript.</p>"},{"location":"shortcuts/userscripts.html#for-users","title":"For users","text":""},{"location":"shortcuts/userscripts.html#requirements","title":"Requirements","text":"<ul> <li>for Firefox: Greasemonkey</li> <li>for Chrome: Tampermonkey</li> </ul>"},{"location":"shortcuts/userscripts.html#install","title":"Install","text":"<ol> <li>In your browser, open https://www.trovu.net/userscripts/fill-and-submit.user.js</li> <li>There should be a dialog opening that offers to install the user script.</li> <li>Install and you are done.</li> </ol>"},{"location":"shortcuts/userscripts.html#for-shortcut-editors","title":"For shortcut editors","text":""},{"location":"shortcuts/userscripts.html#creating-shortcut-that-use-the-userscript","title":"Creating shortcut that use the userscript","text":"<p>The shortcut URL should look like this (linebreaks only for clarity):</p> <pre><code>https://patentscope.wipo.int/search/en/search.jsf#\n  trovu[fill][%23simpleSearchForm\\:fpSearch\\:input]={%query}&amp;\n  trovu[submit]=%5Bid%5E%3D%22simpleSearchForm%3AfpSearch%3Aj%22%5D\n</code></pre> <p>So to make use of the userscript, add a hash parameter (after a <code>#</code>), called <code>trovu</code>. It must contain the properties <code>[fill]</code> and <code>[submit]</code>.</p> <p>Given the example above, it:</p> <ol> <li>calls the URL</li> <li>fills input field found with CSS selector <code>#simpleSearchForm:fpSearch:input</code> with value from <code>{%query}</code></li> <li>submits form with submit button selected by <code>[id^=\"simpleSearchForm:fpSearch:j\"]</code></li> </ol>"},{"location":"shortcuts/userscripts.html#documentation","title":"Documentation:","text":"<ul> <li> <p><code>trovu[fill]</code>: array containing selectors and values</p> <ul> <li><code>trovu[fill][selector1]=value1</code></li> <li><code>trovu[fill][selector2]=value2</code></li> <li><code>...</code></li> </ul> </li> <li> <p><code>trovu[submit]</code>: string with selector of element to click on.</p> </li> </ul>"},{"location":"shortcuts/userscripts.html#notation-selector-string-must-escape-some-chars","title":"Notation: selector string must escape some chars:","text":"<ul> <li><code>:</code> = <code>\\:</code></li> <li><code>.</code> = <code>\\.</code></li> <li><code>#</code> = <code>%23</code></li> </ul>"},{"location":"shortcuts/userscripts.html#for-developers","title":"For developers","text":""},{"location":"shortcuts/userscripts.html#edit-and-install","title":"Edit and install","text":"<ul> <li>Edit <code>src/js/userscripts/fill-and-submit.user.js</code></li> <li><code>npm run deploy</code> will also deploy <code>fill-and-submit.user.js</code>.</li> </ul>"},{"location":"users/advanced.html","title":"Advanced settings &amp; personal shortcuts","text":"<p>You can create and manage your own user shortcuts and set advanced settings:</p> <ol> <li>If you don't have one, create a Github.com account. It is free.</li> <li>Fork trovu-data-user into your own Github account.</li> <li>In there, adjust <code>config.yml</code> to your needs, and add your own shortcuts to <code>shortcuts.yml</code>. (Both are YAML files.)</li> <li>Call Trovu with <code>https://trovu.net/?#github=YOUR_GITHUB_USERNAME</code></li> </ol>"},{"location":"users/advanced.html#custom-configuration","title":"Custom configuration","text":"<p>You may adjust <code>config.yml</code> to your needs.</p>"},{"location":"users/advanced.html#namespaces","title":"Namespaces","text":"<pre><code>namespaces:\n    - o\n    - en\n    - .us\n    - github: john-doe\n      name: john\n    - github: .\n      name: my\n</code></pre> <p>This is an array of the namespaces you want to use. Every entry may be either</p> <ul> <li>a string: Then it refers to an (official) site namespace, i.e. one in the trovu-data repository. Shortcuts in there are curated by the Trovu community.</li> <li>key/value pairs, then they refer to a custom namespace, e.g. your (or someone else's) user namespace in Github. Every entry must contain:<ul> <li><code>github:</code> A Github user name, or a dot</li> <li>(optional) <code>name:</code> Some custom name (default: value from <code>github:</code>)</li> </ul> </li> </ul> <p>The dot will refer to the current GitHub user (where this <code>config.yml</code> is located).</p> <p>The order is also relevant: The later the namespace appears in the list, the higher priority it has. So in the example above, shortcuts in <code>my</code> have highest precedence.</p>"},{"location":"users/advanced.html#default-keyword","title":"Default keyword","text":"<pre><code>defaultKeyword: g\n</code></pre> <p>If no keyword is recognized in a query, this one will be used. Useful for setting up a much used shortcut.</p>"},{"location":"users/advanced.html#language","title":"Language","text":"<pre><code>language: en\n</code></pre> <p>For Wikipedia in your language (or other shortcuts using <code>{$language}</code>). Basically, it fills the <code>{$language}</code> variable in the shortcut URLs. Now, using the <code>w</code> shortcut will get you to the Wikipedia in your language, as its shortcut URL is set as <code>https://{$language}.wikipedia.org/</code>.</p>"},{"location":"users/advanced.html#country","title":"Country","text":"<pre><code>country: de\n</code></pre> <p>For shortcuts that use <code>{$country}</code> in their URL. Works similarly as <code>{$language}</code>.</p>"},{"location":"users/advanced.html#personal-shortcuts","title":"Personal shortcuts","text":"<p>Add personal shortcuts to <code>shortcuts.yml</code>.</p> <p>Your shortcuts are an associative array, with <code>KEYWORD ARGUMENT_COUNT</code> as its key. Keys must be unique.</p> <p>For the value, there is a short and a long notation possible.</p>"},{"location":"users/advanced.html#short-notation","title":"Short notation","text":"<p>This shortcut will match for <code>examplekeyword</code> with no arguments:</p> <pre><code>examplekeyword 0: http://www.example.com/\n</code></pre> <p>This shortcut will match for <code>examplekeyword foo</code>, so for the same keyword but with one argument:</p> <pre><code>examplekeyword 1: http://www.example.com/?q={%query}\n</code></pre> <p>And with more arguments: <code>examplekeyword foo, bar</code>:</p> <pre><code>examplekeyword 2: http://www.example.com/?q={%query}&amp;p={%puery}\n</code></pre>"},{"location":"users/advanced.html#long-notation","title":"Long notation","text":"<p>In the long notation, you can also define title, description and tags:</p> <pre><code>examplekeyword 2:\n    url: http://www.example.com/?q={%query}&amp;p={%puery}\n    title: Custom shortcut\n    description: My custom shortcut with the keyword examplekeyword and 2 arguments.\n    tags:\n        - example\n</code></pre>"},{"location":"users/integration.html","title":"Use Trovu on your device","text":""},{"location":"users/integration.html#desktop-web-browser","title":"Desktop web browser","text":""},{"location":"users/integration.html#firefox","title":"Firefox","text":"<ol> <li>Open trovu.net, either with your Github user name or without:<ul> <li><code>https://trovu.net/?#github=YOUR_GITHUB_USERNAME</code>, or</li> <li><code>https://trovu.net/?#country=gb&amp;language=en</code>. (adjust to your country &amp; language)</li> </ul> </li> <li>In the browser address bar, right-click.</li> <li>Select Add \"Trovu\". It is the last item.</li> <li> <p>Open a new tab with the URL:</p> <pre><code>about:preferences#search\n</code></pre> </li> <li> <p>Under Default Search Engine, select Trovu.</p> </li> </ol>"},{"location":"users/integration.html#chrome","title":"Chrome","text":"<ol> <li>Open trovu.net, either with your Github user name or without:<ul> <li><code>https://trovu.net/?#github=YOUR_GITHUB_USERNAME</code>, or</li> <li><code>https://trovu.net/?#country=gb&amp;language=en</code>. (adjust to your country &amp; language)</li> </ul> </li> <li> <p>Open a new tab with the URL:</p> <pre><code>chrome://settings/searchEngines\n</code></pre> </li> <li> <p>There, right to Manage search engines is a search field. Search for Trovu.</p> </li> <li>When found, click the 3 dots right to it.</li> <li>Select Make default.</li> </ol>"},{"location":"users/integration.html#other","title":"Other","text":"<p>Use one of these URL templates and add it where your browser allows to set custom browser search engines:</p> <pre><code>https://trovu.net/process/?#country=gb&amp;language=en&amp;query=%s\nhttps://trovu.net/process/?#github=YOUR_GITHUB_USERNAME&amp;query=%s\n</code></pre> <p>(Note the <code>process/</code> part in the URL! You may need to adjust your <code>country</code>, <code>language</code> or <code>github</code> parameter.)</p>"},{"location":"users/integration.html#android","title":"Android","text":""},{"location":"users/integration.html#searchbar-ex-search-widget","title":"SearchBar Ex - Search Widget","text":"<p>This a free, generic app to search any search engine that supports URL with a <code>%s</code> placeholder.</p> <ol> <li>With your Android device, visit the app in the Play store</li> <li>Install it on your device.</li> <li>Open the app.</li> <li>Left to the search input, click on the icon.</li> <li>At the botton, click + Add</li> <li>Select Search</li> <li>Select Custom Search</li> <li>For name, enter \"Trovu\"</li> <li>For URL, enter a URL template like in Browser / other.</li> <li>Click the back button of the app in the upper left corner</li> </ol> <p>Now, you can enter Trovu queries which will be redirected to your browser.</p>"},{"location":"users/integration.html#firefox-for-android","title":"Firefox for Android","text":"<p>Firefox allows to add custom search engines: Any URL with a <code>%s</code> placeholder works.</p> <ol> <li>Tap on the address bar</li> <li>Tap on \ud83d\udd0d Search engine</li> <li>Tap on \u2699\ufe0f Search engine settings</li> <li>Tap on \u2795 Add search engine</li> <li>Tap on Other</li> <li>Enter a name, e.g. <code>Trovu</code></li> <li>Enter the template URL, like for Other</li> <li>Tap on \u2714 (in the upper right corner)</li> </ol> <p>Here is an example setting for the user <code>georgjaehnig</code>:</p> <p></p>"},{"location":"users/processing.html","title":"How a query is processed","text":"<p>The purpose of a query is to match with a shortcut. And shortcuts are organized by Namespaces: Every shortcut belongs exactly to one namespace.</p>"},{"location":"users/processing.html#namespace-setting","title":"Namespace setting","text":"<p>When calling Trovu without query parameters, 3 default namespaces will be set based on the browser's language settings. For instance, if the browser's language is <code>de-DE</code>, we will use these namespaces and their shortcut files:</p> <ul> <li>o.yml \u2013 planet namespace</li> <li>de.yml \u2013 German language namespace</li> <li>.de.yml \u2013 Germany namespace</li> </ul>"},{"location":"users/processing.html#processing-a-query","title":"Processing a query","text":"<p>Now, let's look at the processing of a query:</p> <ol> <li>A query comes in, e.g. <code>g foobar</code>.</li> <li>The current namespace setting is <code>o,de,.de</code>.</li> <li> <p>Given the namespaces, all the shortcuts are fetched from their YAML files into a Javascript variable in the client.</p> <ul> <li>The fetch() call checks also if the files are already in the browser cache, and only requests them from remote if they are not cached yet.</li> <li>To reload the shortcuts, use the <code>reload</code> command (see below).</li> </ul> </li> <li> <p>The query is parsed \u2013 in the client by Javascript \u2013 into</p> <ul> <li>keyword: <code>g</code></li> <li>argument: <code>foobar</code></li> </ul> </li> <li>Based on the query and the namespace settings, the loaded shortcuts are searched whether they match a query with the keyword <code>g</code> and one argument, i.e. if they contain a shortcut keyed with <code>g 1</code>.</li> <li>We find 2 matches:<ul> <li>one in o, pointing to <code>google.com</code></li> <li>and one in .de, pointing to <code>google.de</code></li> </ul> </li> <li>From the found matches, the results are evaluated in namespace order.</li> <li>Since namespace <code>.de</code> has higher priority than <code>o</code>, its URL is used for further processing<ul> <li><code>https://www.google.de/search?hl={$language}&amp;q={%query}&amp;ie=utf-8</code></li> </ul> </li> <li>The <code>{$language}</code> placeholder is being replaced with the variable <code>de</code>.</li> <li>The <code>{%query}</code> placeholder is being replaced with the query argument <code>foobar</code>.</li> <li>A redirect to the URL is made.</li> </ol>"},{"location":"users/processing.html#reloading-shortcuts","title":"Reloading shortcuts","text":"<p>Since shortcuts are cached in the browser cache, you may want to reload them once they got updated. Do so by</p> <ul> <li>either prefixing a query: <code>reload:g foobar</code></li> <li>or only calling <code>reload</code>.</li> </ul>"},{"location":"users/support.html","title":"Support","text":"<p>Here you can find support:</p> <ul> <li>Some problems may be listed in Troubleshooting.</li> <li>Ask any Trovu-related question in the Telegram group: https://t.me/trovu_net</li> <li>Or send an email: info@trovu.net</li> </ul>"},{"location":"users/troubleshooting.html","title":"Troubleshooting","text":""},{"location":"users/troubleshooting.html#general","title":"General","text":""},{"location":"users/troubleshooting.html#reload","title":"Reload","text":"<p>Config and shortcut files are usually only fetched once, and after that are only taken from the browser cache. So if you have made changes to one of them, you need to reload them.</p> <p>You can reload by:</p> <ul> <li>prefixing your query with <code>reload:</code>, e.g. <code>reload:g foobar</code></li> <li>sending a query only containing <code>reload</code></li> <li>opening the Trovu homepage with https://trovu.net/?#reload=1.</li> </ul>"},{"location":"users/troubleshooting.html#debugging-mode","title":"Debugging mode","text":"<p>Enter debugging mode with</p> <ul> <li>https://trovu.net/?#debug=1 , or</li> <li>a query starting with <code>debug:</code>, e.g.: <code>debug:g foobar</code></li> </ul> <p>In debug, all the processing will be done \u2013 but without the actual redirect. You will be able to see</p> <ul> <li>which config and shortcut URLs are being fetched</li> <li>whether they are found in the browser cache or not</li> <li>how a query got matched.</li> </ul> <p>You can also combine debugging and reloading, e.g. <code>debug:reload:g foobar</code></p>"},{"location":"users/troubleshooting.html#faq","title":"FAQ","text":""},{"location":"users/troubleshooting.html#i-edited-a-shortcut-but-it-has-no-effect","title":"I Edited a Shortcut, but It Has No Effect","text":"<p>This might be a caching issue.</p> <p>First of all, make sure if your edit arrived in https://data.trovu.net/data/data.json . It should get updated automatically by a Github webhook on the git push event.</p> <p>Then, you can either</p> <ul> <li>call a query containing only <code>reload</code>.</li> <li>call your query prefixed with <code>reload:</code>, e.g. <code>reload:g foobar</code>.</li> </ul> <p>Both will cause your browser to reload the shortcut files from <code>data.trovu.net</code>.</p> <p>If that did not help, try debugging mode (see above).</p> <p>And if that did not help, clear your browser cache. There are extensions that make this easy, such as Clear Cache for Firefox or Clear Cache for Chrome.</p>"}]}